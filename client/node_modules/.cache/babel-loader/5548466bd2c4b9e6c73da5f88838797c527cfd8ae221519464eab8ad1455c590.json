{"ast":null,"code":"var _jsxFileName = \"D:\\\\secure voting system\\\\client\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const {\n    isAuthenticated,\n    token\n  } = useAuth();\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      // Initialize socket connection\n      const newSocket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:5000', {\n        auth: {\n          token: token\n        },\n        transports: ['websocket', 'polling']\n      });\n\n      // Connection event handlers\n      newSocket.on('connect', () => {\n        console.log('Socket connected:', newSocket.id);\n        setIsConnected(true);\n        setConnectionError(null);\n      });\n      newSocket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        setIsConnected(false);\n        setConnectionError(reason);\n      });\n      newSocket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        setConnectionError(error.message);\n        setIsConnected(false);\n      });\n\n      // Reconnection event handlers\n      newSocket.on('reconnect', attemptNumber => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        setIsConnected(true);\n        setConnectionError(null);\n      });\n      newSocket.on('reconnect_attempt', attemptNumber => {\n        console.log('Socket reconnection attempt:', attemptNumber);\n      });\n      newSocket.on('reconnect_error', error => {\n        console.error('Socket reconnection error:', error);\n        setConnectionError(error.message);\n      });\n      newSocket.on('reconnect_failed', () => {\n        console.error('Socket reconnection failed');\n        setConnectionError('Failed to reconnect to server');\n        setIsConnected(false);\n      });\n      setSocket(newSocket);\n\n      // Cleanup function\n      return () => {\n        newSocket.close();\n        setSocket(null);\n        setIsConnected(false);\n        setConnectionError(null);\n      };\n    } else {\n      // Disconnect socket if user is not authenticated\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n        setConnectionError(null);\n      }\n    }\n  }, [isAuthenticated, token]);\n\n  // Join election room\n  const joinElection = electionId => {\n    if (socket && isConnected) {\n      socket.emit('join-election', electionId);\n    }\n  };\n\n  // Leave election room\n  const leaveElection = electionId => {\n    if (socket && isConnected) {\n      socket.emit('leave-election', electionId);\n    }\n  };\n\n  // Cast vote\n  const castVote = voteData => {\n    if (socket && isConnected) {\n      socket.emit('cast-vote', voteData);\n    }\n  };\n\n  // Request real-time results\n  const requestResults = electionId => {\n    if (socket && isConnected) {\n      socket.emit('request-results', electionId);\n    }\n  };\n\n  // Listen for vote updates\n  const onVoteUpdate = callback => {\n    if (socket) {\n      socket.on('vote-update', callback);\n      return () => socket.off('vote-update', callback);\n    }\n    return () => {};\n  };\n\n  // Listen for results updates\n  const onResultsUpdate = callback => {\n    if (socket) {\n      socket.on('results-update', callback);\n      return () => socket.off('results-update', callback);\n    }\n    return () => {};\n  };\n\n  // Listen for vote errors\n  const onVoteError = callback => {\n    if (socket) {\n      socket.on('vote-error', callback);\n      return () => socket.off('vote-error', callback);\n    }\n    return () => {};\n  };\n\n  // Listen for election status updates\n  const onElectionStatusUpdate = callback => {\n    if (socket) {\n      socket.on('election-status-update', callback);\n      return () => socket.off('election-status-update', callback);\n    }\n    return () => {};\n  };\n\n  // Listen for admin notifications\n  const onAdminNotification = callback => {\n    if (socket) {\n      socket.on('admin-notification', callback);\n      return () => socket.off('admin-notification', callback);\n    }\n    return () => {};\n  };\n\n  // Listen for voter notifications\n  const onVoterNotification = callback => {\n    if (socket) {\n      socket.on('voter-notification', callback);\n      return () => socket.off('voter-notification', callback);\n    }\n    return () => {};\n  };\n\n  // Get connection status\n  const getConnectionStatus = () => {\n    return {\n      isConnected,\n      connectionError,\n      socketId: (socket === null || socket === void 0 ? void 0 : socket.id) || null\n    };\n  };\n\n  // Reconnect manually\n  const reconnect = () => {\n    if (socket) {\n      socket.connect();\n    }\n  };\n  const value = {\n    socket,\n    isConnected,\n    connectionError,\n    joinElection,\n    leaveElection,\n    castVote,\n    requestResults,\n    onVoteUpdate,\n    onResultsUpdate,\n    onVoteError,\n    onElectionStatusUpdate,\n    onAdminNotification,\n    onVoterNotification,\n    getConnectionStatus,\n    reconnect\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use socket context\n_s(SocketProvider, \"Tghjb1ug2DmrNWMXpMORVpVQDsY=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","isConnected","setIsConnected","connectionError","setConnectionError","isAuthenticated","token","newSocket","process","env","REACT_APP_SERVER_URL","auth","transports","on","console","log","id","reason","error","message","attemptNumber","close","joinElection","electionId","emit","leaveElection","castVote","voteData","requestResults","onVoteUpdate","callback","off","onResultsUpdate","onVoteError","onElectionStatusUpdate","onAdminNotification","onVoterNotification","getConnectionStatus","socketId","reconnect","connect","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["D:/secure voting system/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionError, setConnectionError] = useState(null);\r\n  const { isAuthenticated, token } = useAuth();\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && token) {\r\n      // Initialize socket connection\r\n      const newSocket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:5000', {\r\n        auth: {\r\n          token: token\r\n        },\r\n        transports: ['websocket', 'polling']\r\n      });\r\n\r\n      // Connection event handlers\r\n      newSocket.on('connect', () => {\r\n        console.log('Socket connected:', newSocket.id);\r\n        setIsConnected(true);\r\n        setConnectionError(null);\r\n      });\r\n\r\n      newSocket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        setIsConnected(false);\r\n        setConnectionError(reason);\r\n      });\r\n\r\n      newSocket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        setConnectionError(error.message);\r\n        setIsConnected(false);\r\n      });\r\n\r\n      // Reconnection event handlers\r\n      newSocket.on('reconnect', (attemptNumber) => {\r\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n        setIsConnected(true);\r\n        setConnectionError(null);\r\n      });\r\n\r\n      newSocket.on('reconnect_attempt', (attemptNumber) => {\r\n        console.log('Socket reconnection attempt:', attemptNumber);\r\n      });\r\n\r\n      newSocket.on('reconnect_error', (error) => {\r\n        console.error('Socket reconnection error:', error);\r\n        setConnectionError(error.message);\r\n      });\r\n\r\n      newSocket.on('reconnect_failed', () => {\r\n        console.error('Socket reconnection failed');\r\n        setConnectionError('Failed to reconnect to server');\r\n        setIsConnected(false);\r\n      });\r\n\r\n      setSocket(newSocket);\r\n\r\n      // Cleanup function\r\n      return () => {\r\n        newSocket.close();\r\n        setSocket(null);\r\n        setIsConnected(false);\r\n        setConnectionError(null);\r\n      };\r\n    } else {\r\n      // Disconnect socket if user is not authenticated\r\n      if (socket) {\r\n        socket.close();\r\n        setSocket(null);\r\n        setIsConnected(false);\r\n        setConnectionError(null);\r\n      }\r\n    }\r\n  }, [isAuthenticated, token]);\r\n\r\n  // Join election room\r\n  const joinElection = (electionId) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('join-election', electionId);\r\n    }\r\n  };\r\n\r\n  // Leave election room\r\n  const leaveElection = (electionId) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('leave-election', electionId);\r\n    }\r\n  };\r\n\r\n  // Cast vote\r\n  const castVote = (voteData) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('cast-vote', voteData);\r\n    }\r\n  };\r\n\r\n  // Request real-time results\r\n  const requestResults = (electionId) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('request-results', electionId);\r\n    }\r\n  };\r\n\r\n  // Listen for vote updates\r\n  const onVoteUpdate = (callback) => {\r\n    if (socket) {\r\n      socket.on('vote-update', callback);\r\n      return () => socket.off('vote-update', callback);\r\n    }\r\n    return () => {};\r\n  };\r\n\r\n  // Listen for results updates\r\n  const onResultsUpdate = (callback) => {\r\n    if (socket) {\r\n      socket.on('results-update', callback);\r\n      return () => socket.off('results-update', callback);\r\n    }\r\n    return () => {};\r\n  };\r\n\r\n  // Listen for vote errors\r\n  const onVoteError = (callback) => {\r\n    if (socket) {\r\n      socket.on('vote-error', callback);\r\n      return () => socket.off('vote-error', callback);\r\n    }\r\n    return () => {};\r\n  };\r\n\r\n  // Listen for election status updates\r\n  const onElectionStatusUpdate = (callback) => {\r\n    if (socket) {\r\n      socket.on('election-status-update', callback);\r\n      return () => socket.off('election-status-update', callback);\r\n    }\r\n    return () => {};\r\n  };\r\n\r\n  // Listen for admin notifications\r\n  const onAdminNotification = (callback) => {\r\n    if (socket) {\r\n      socket.on('admin-notification', callback);\r\n      return () => socket.off('admin-notification', callback);\r\n    }\r\n    return () => {};\r\n  };\r\n\r\n  // Listen for voter notifications\r\n  const onVoterNotification = (callback) => {\r\n    if (socket) {\r\n      socket.on('voter-notification', callback);\r\n      return () => socket.off('voter-notification', callback);\r\n    }\r\n    return () => {};\r\n  };\r\n\r\n  // Get connection status\r\n  const getConnectionStatus = () => {\r\n    return {\r\n      isConnected,\r\n      connectionError,\r\n      socketId: socket?.id || null\r\n    };\r\n  };\r\n\r\n  // Reconnect manually\r\n  const reconnect = () => {\r\n    if (socket) {\r\n      socket.connect();\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    connectionError,\r\n    joinElection,\r\n    leaveElection,\r\n    castVote,\r\n    requestResults,\r\n    onVoteUpdate,\r\n    onResultsUpdate,\r\n    onVoteError,\r\n    onElectionStatusUpdate,\r\n    onAdminNotification,\r\n    onVoterNotification,\r\n    getConnectionStatus,\r\n    reconnect\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use socket context\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default SocketContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}